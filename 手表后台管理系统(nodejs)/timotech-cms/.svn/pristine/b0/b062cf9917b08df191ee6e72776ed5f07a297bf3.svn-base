/**
 * Created by Administrator on 2015/10/8.
 */
var async = require('async');
var moment = require('moment');
var mongoDB = require('../common/mongo_pool');
var mysqlDao = require('../common/mysql_pool');

exports.getLogList = function (logLevel, keys, source, timeChecked, startDate, endDate, offSet, pageSize, callback) {
	var col = mongoDB.collection('log');
	var condition = {$and: []};
	if (logLevel != 'ALL') {
		condition.$and.push({logLevel: logLevel});
	}

	if (source != 'ALL') {
		condition.$and.push({source: source.trim()});
	}

	if (timeChecked) {
		condition.$and.push({createTime: {$gte: new Date(startDate), $lt: new Date(endDate)}});
	}
	//console.log("condition-->" + JSON.stringify(condition));
	if (keys && keys.length > 0) {
		var keyCon = {$or: []};
		condition.$and.push(keyCon);
		keys.forEach(function (key) {
			keyCon.$or.push({key: new RegExp('^' + key.trim())});
		});
	}

	if (condition.$and.length == 0) {
		condition = {};
	}

	function tranformResult(err, results) {
		var countResult = (results && results.length > 0) ? results[0] : 0;
		var logResults = (results[1] ? results[1] : []);
		logResults.forEach(function (log) {
			log.createTime = moment(log.createTime).format('YYYY-MM-DD HH:mm:ss');
		});

		callback(err, {total: countResult, rows: logResults});
	}

	var tasks = [];
	tasks.push(function (callback2) {
		col.count(condition, callback2);
	});
	tasks.push(function (callback2) {
		col.findItems(condition, {skip: offSet, limit: pageSize, sort: [['createTime', -1]]}, callback2);
	});

	async.parallel(
			tasks,
			tranformResult
	);
};


exports.getExportLog = function (logLevel, keys, source, timeChecked, startDate, endDate, limit, callback) {
	var col = mongoDB.collection('log');
	var condition = {$and: []};
	if (logLevel != 'ALL') {
		condition.$and.push({logLevel: logLevel});
	}

	if (source != 'ALL') {
		condition.$and.push({source: source.trim()});
	}

	if (timeChecked) {
		condition.$and.push({createTime: {$gte: new Date(startDate), $lt: new Date(endDate)}});
	}
	//console.log("condition-->" + JSON.stringify(condition));
	if (keys && keys.length > 0) {
		var keyCon = {$or: []};
		condition.$and.push(keyCon);
		keys.forEach(function (key) {
			keyCon.$or.push({key: new RegExp('^' + key.trim())});
		});
	}

	if (condition.$and.length == 0) {
		condition = {};
	}

	function tranformResult(err, results) {
		var logResults = results[0];
		logResults.forEach(function (log) {
			log.createTime = moment(log.createTime).format('YYYY-MM-DD HH:mm:ss');
		});

		callback(err, logResults);
	}

	var tasks = [];
	tasks.push(function (callback2) {
		col.findItems(condition, {skip: 0, limit: limit, sort: [['createTime', -1]]}, callback2);
	});

	async.parallel(
			tasks,
			tranformResult
	);
};

exports.getDeviceList = function (query, callback) {
	var sql = "select  t.udid as sn,t.iccid,t.sw_version,o.organName,p.babyId " +
			"from t_device t join t_organ o on t.organId = o.id " +
			"left join t_device_baby p on t.udid = p.deviceId " +
			"where o.path like concat('%,', :organID, ',%') " +
			(query.SN ? " and t.udid=:SN" : "");
	mysqlDao.executeListForPagination(sql, query, callback);
};

exports.getSetting = function (babyId, callback) {
	var sql = "select a.paraName,a.paraValue,b.desc " +
			"from t_baby_config a " +
			"inner join t_setting_desc b on b.paraName=a.paraName " +
			"where a.babyId=:babyId and a.module='setting'";
	mysqlDao.executeList(sql, {'babyId': babyId}, callback);
};

exports.getMembers = function (babyId, callback) {
	var sql = "select nickName,phone,otherPhone from t_member where id in(" +
			"select memberId from t_family_member where familyId=(" +
			"select familyId from t_family_baby where babyId=:babyId))";
	mysqlDao.executeList(sql, {'babyId': babyId}, callback);
};

exports.getBabies = function (babyId, callback) {
	var sql = "select name,phone,otherPhone from t_baby where id in(" +
			"select babyId from t_family_baby where familyId=(" +
			"select familyId from t_family_baby where babyId=:babyId))";
	mysqlDao.executeList(sql, {'babyId': babyId}, callback);
};

exports.getPackageList = function (callback) {
	var sql = "select id,name,fromVersion,toVersion,url,md5,size,summary from t_ota_diff_package";
	mysqlDao.executeList(sql, callback);
};
exports.removePackage = function (id, callback) {
	var sql = "delete from t_ota_diff_package where id=:id";
	mysqlDao.executeUpdate(sql, {"id": id}, callback);
};
exports.savePackage = function (fromVersion, toVersion, url, md5, size, summary, createTime, callback) {
	var sql = "insert into t_ota_diff_package(name,fromVersion,toVersion,url,md5,size,summary,createTime) " +
			"values('watch.bin',:fromVersion,:toVersion,:url,:md5,:size,:summary,:createTime)";
	mysqlDao.executeUpdate(sql, {
		"fromVersion": fromVersion,
		"toVersion": toVersion,
		"url": url,
		"md5": md5,
		"size": size,
		"summary": summary,
		"createTime": createTime
	}, callback);
};
exports.updatePackage = function (fromVersion, toVersion, url, md5, size, summary, id, callback) {
	var sql = "update t_ota_diff_package " +
			"set fromVersion=:fromVersion,toVersion=:toVersion,url=:url,md5=:md5,size=:size,summary=:summary " +
			"where id=:id";
	mysqlDao.executeUpdate(sql, {
		"fromVersion": fromVersion,
		"toVersion": toVersion,
		"url": url,
		"md5": md5,
		"size": size,
		"summary": summary,
		"id": id
	}, callback);
};


exports.getUpdateList = function (callback) {
    var sql = "select u.id," +
		"u.version," +
		"u.modifyDesc," +
		"u.updateDesc," +
		"u.updatePreTip," +
		"u.updatingTip," +
		"u.failureTip," +
		"d.version wVersion " +
		"from t_ota_update u,t_ota_update_detail d " +
		"where u.id=d.updateId";
    mysqlDao.executeList(sql, callback);
};

exports.removeUp = function (id, callback) {
    var sql = "delete from t_ota_update where id=:id";
    var sql2 = "delete from t_ota_update_detail where updateId=:id";
    mysqlDao.executeUpdate(sql, {"id": id}, callback);
    mysqlDao.executeUpdate(sql2, {"id": id}, callback);
};

exports.saveUp = function (query, callback) {
    var sql2="create trigger `insert_t_ota_update_detail` AFTER INSERT on `t_ota_update` for each row " +
        "insert into t_ota_update_detail(updateId,otaName,version) value(NEW.id,'watch.bin',:wVersion);"
    mysqlDao.executeUpdate(sql2, query, callback);

    var sql = "insert into t_ota_update(version,modifyDesc,updateDesc,updatePreTip,updatingTip,failureTip,createTime) " +
		"value(:version,:modifyDesc,:updateDesc,:updatePreTip,:updatingTip,:failureTip,:createTime)";
    mysqlDao.executeUpdate(sql, query, callback);
};

exports.updateUp = function (query, callback) {
    var sql = "update t_ota_update t1,t_ota_update_detail t2 set " +
		"t1.version=:version," +
		"t1.modifyDesc=:modifyDesc," +
		"t1.updateDesc=:updateDesc," +
		"t1.updatePreTip=:updatePreTip," +
		"t1.updatingTip=:updatingTip," +
		"t1.failureTip=:failureTip," +
		"t2.version=:wVersion " +
		"where t1.id=:id and t2.updateId=:id";
    mysqlDao.executeUpdate(sql,query, callback);
};

